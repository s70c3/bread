# Python In-built packages
from pathlib import Path
import PIL

# External packages
import streamlit as st

# Local Modules
import pages.utils.helper as helper
import pages.utils.settings as settings

# Setting page layout
st.set_page_config(
    page_title="–î–µ—Ç–µ–∫—Ü–∏—è —Ö–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã—Ö –∏–∑–¥–µ–ª–∏—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Main page heading
st.title("–ü–æ–¥—Å—á—ë—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

# Sidebar
st.sidebar.header("–ü–æ–¥—Å—á—ë—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–Ω–ª–∞–π–Ω")

confidence = float(st.sidebar.slider(
    "–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏", 25, 100, 40)) / 100

model_path = Path(settings.DETECTION_MODEL)

# Load Pre-trained ML Model
try:
    model = helper.load_model(model_path)
except Exception as ex:
    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å: {model_path}")
    st.error(ex)


import requests

response = requests.get('http://backend:8000/camera')

if response.status_code == 200:
    sources = response.json()
    sources = {camera['name']: camera['rtsp_stream'] for camera in sources['cameras']}
    print(sources)
else:
    print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É.')

source_radio = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–µ—Ä—É", sources.keys())

stream_address= str(sources.get(source_radio))

helper.play_rtsp_stream(confidence, model, stream_address)
